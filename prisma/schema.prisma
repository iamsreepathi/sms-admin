// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  emailVerified DateTime?
  phone         String
  image         String?
  accounts      account[]
  sessions      session[]
}

model verification_token {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model department {
  id Int @id @default(autoincrement())
  name String @unique
  shortDesc String @db.VarChar(255)
  description String @db.Text
  phone String @db.VarChar(25)
  email String @db.VarChar(50)
  line1 String @db.VarChar(100)
  line2 String @db.VarChar(50)
  city String @db.VarChar(100)
  region String @db.Char(2)
  postalCode String @db.VarChar(6)
  // hod teacher @relation(fields: [teacherId], references: [id])
  hodId Int? @unique
  teachers teacher[]
  categories category[]
  students student[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model semester {
  id Int @id @default(autoincrement())
  name String
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  students semester_student[]
  courses semester_course[]
  active Int @db.SmallInt
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model student {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  dob DateTime @db.Date
  father String
  mother String
  admission DateTime @db.Date
  gender Gender
  department department @relation(fields: [depId], references: [id], onDelete: Cascade)
  depId Int
  semesters semester_student[]
  courses student_course[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model semester_student {
  semester semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId Int
  student student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  active Int @db.SmallInt
  @@id([semesterId, studentId])
}

model teacher {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  dob DateTime @db.Date
  father String
  mother String
  admission DateTime @db.Date
  gender Gender
  subject String
  department department @relation(fields: [depId], references: [id], onDelete: Cascade)
  depId Int
  courses course[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model category {
  id Int @id @default(autoincrement())
  name String @unique
  description String @db.Text
  department department @relation(fields: [depId], references: [id], onDelete: Cascade)
  depId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  courses course[]
}

model course {
  id Int @id @default(autoincrement())
  name String @unique
  category category @relation(fields: [catId], references: [id])
  catId Int 
  description String @db.Text
  ratings Int @db.Integer
  overallRating Int @db.Integer
  credits Int @db.SmallInt
  capacity Int @db.SmallInt
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  location String @db.VarChar(100)
  teacherName String
  teacher teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId Int
  students student_course[]
  semesters semester_course[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model student_course {
  id Int @id @default(autoincrement())
  student student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
  semesterId Int
}

model counter {
  id Int @id @default(autoincrement())
  model String @db.VarChar(100)
  count BigInt @db.BigInt
  shortDesc String @db.VarChar(255)
  display Int @db.SmallInt
}

view available_hods {
  value Int @unique
  label String
}

model event {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String @db.Text
  start DateTime
  end DateTime
  location String? @db.VarChar(255)
  organizer String @db.VarChar(100)
  email String @db.VarChar(100)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model semester_course {
  semester semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId Int
  course course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
  @@id([semesterId, courseId])
  active Int @db.SmallInt
}